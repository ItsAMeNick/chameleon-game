{"version":3,"sources":["modules/firestore.js","components/LoadTopics.js","components/Join.js","components/Host.js","components/Menu.js","components/Game.js","App.js","serviceWorker.js","modules/reducer.js","modules/store.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","LoadTopics","props","state","loaded","today","Date","collection","get","then","resp","topics","topic","docs","data","words","setState","cookie","save","toISOString","split","path","setTopics","ProgressBar","now","this","label","Component","connect","dispatch","type","payload","Join","player_name","session_key","error_message","where","toUpperCase","length","stage","players","includes","doc","id","update","FieldValue","arrayUnion","setSession","key","setPlayer","db_id","Row","Col","Alert","variant","Form","Label","Control","onChange","e","target","value","Button","onClick","joinGame","name","VALID_CHARS","Host","Math","floor","random","add","round","word","chameleon","ref","hostGame","setRoom","Menu","mode","session","load","Card","Body","Header","genBody","Footer","titleCase","string","sentence","toLowerCase","i","slice","join","Game","onSnapshot","includeMetadataChanges","exists","updateGame","remove","clearGame","lobby","hints","voting","voters","results","Object","keys","new_chameleon","delete","arrayRemove","p","push","ListGroup","Item","active","counter","map","Table","bordered","striped","genBoard","role","rows","colSpan","r","row","c","counts","v","votes","genFooter","App","rel","href","integrity","crossOrigin","db_updated","debug","Boolean","window","location","hostname","match","initialState","chameleonReducer","action","console","log","newState","_","cloneDeep","vote","reduxStore","REDUX_INITIAL_DATA","createStore","reducer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fadfcd2f.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport firestore from 'firebase/firestore'; // eslint-disable-line no-unused-vars\r\n\r\nvar firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FS_API_KEY,\r\n    authDomain: process.env.REACT_APP_FS_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_FS_DB_URL,\r\n    projectId: process.env.REACT_APP_FS_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FS_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FS_MESSAGE_ID,\r\n    appId: process.env.REACT_APP_FS_MEASURE_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase.firestore();\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport firestore from \"../modules/firestore.js\";\r\nimport cookie from \"react-cookies\";\r\n\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\nclass LoadTopics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaded: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let today = new Date()\r\n        //You cant store all of the topics in the cookies so you have to load them every time :(\r\n        // if (cookie.load(\"db_update\") === today.toISOString().split(\"T\")[0]) {\r\n        //     console.log(\"Cached Topics\")\r\n        //     this.setState({loaded: 100})\r\n        //     cookie.save(\"db_update\", today.toISOString().split(\"T\")[0], {path: \"/\"})\r\n        //     console.log(cookie.load(\"topics\"))\r\n        //     this.props.setTopics(cookie.load(\"topics\"))\r\n        // } else {\r\n        //     console.log(\"Getting Topics\")\r\n        //     firestore.collection(\"topics\").get().then(resp => {\r\n        //         let topics = {}\r\n        //         for (let topic in resp.docs) {\r\n        //             let data = resp.docs[topic].data()\r\n        //             topics[data.topic] = data.words\r\n        //         }\r\n        //         this.setState({loaded: 100})\r\n        //         cookie.save(\"db_update\", today.toISOString().split(\"T\")[0], {path: \"/\"})\r\n        //         cookie.save(\"topics\", topics, {path: \"/\"});\r\n        //         this.props.setTopics(topics)\r\n        //     });\r\n        // }\r\n        firestore.collection(\"topics\").get().then(resp => {\r\n            let topics = {}\r\n            for (let topic in resp.docs) {\r\n                let data = resp.docs[topic].data()\r\n                topics[data.topic] = data.words\r\n            }\r\n            this.setState({loaded: 100})\r\n            cookie.save(\"db_update\", today.toISOString().split(\"T\")[0], {path: \"/\"})\r\n            cookie.save(\"topics\", topics, {path: \"/\"});\r\n            this.props.setTopics(topics)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ProgressBar now={this.state.loaded} label={this.state.loaded+\"%\"}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setTopics: (topics) => dispatch({\r\n        type: \"set_topics\",\r\n        payload: topics\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoadTopics);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport firestore from \"../modules/firestore.js\";\r\nimport firebase from \"firebase/app\";\r\nimport cookie from \"react-cookies\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nclass Join extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            player_name: \"\",\r\n            session_key: \"\",\r\n            error_message: \"\"\r\n        };\r\n    }\r\n\r\n    joinGame() {\r\n        if (this.state.player_name) {\r\n            if (this.state.session_key) {\r\n                firestore.collection(\"sessions\").where(\"key\", \"==\", this.state.session_key.toUpperCase()).get().then(resp => {\r\n                    if (resp.docs.length === 1) {\r\n                        if (resp.docs[0].data().stage !== \"lobby\") {\r\n                            this.setState({error_message: \"Please wait for the current round to finish before attempting to join.\"})\r\n                        } else if (resp.docs[0].data().players.includes(this.state.player_name)) {\r\n                            this.setState({error_message: \"Player name is unavaliable.\"})\r\n                        } else {\r\n                            firestore.collection(\"sessions\").doc(resp.docs[0].id).update({\r\n                                players: firebase.firestore.FieldValue.arrayUnion(this.state.player_name)\r\n                            })\r\n                            this.props.setSession(resp.docs[0].data().key, resp.docs[0].id);\r\n                            this.props.setPlayer(this.state.player_name);\r\n                            cookie.save(\"session\", {key: resp.docs[0].data().key, db_id: resp.docs[0].id})\r\n                            cookie.save(\"player\", this.state.player_name)\r\n                        }\r\n                    } else {\r\n                        this.setState({error_message: \"Session key does not exist.\"})\r\n                    }\r\n                })\r\n            } else {\r\n                this.setState({error_message: \"Enter a session key.\"})\r\n            }\r\n        } else {\r\n            this.setState({error_message: \"Enter a Name!\"})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.error_message ?\r\n                    <Row><Col>\r\n                        <Alert variant=\"danger\">\r\n                            {this.state.error_message}\r\n                        </Alert>\r\n                    </Col></Row>\r\n                : null}\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Label> Session Key: </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control onChange={(e) => this.setState({session_key: e.target.value})}/>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Label> Player Name: </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control onChange={(e) => this.setState({player_name: e.target.value})}/>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <Row>\r\n                    <Button onClick={() => this.joinGame()}>\r\n                        Join Game\r\n                    </Button>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setSession: (key, db_id) => dispatch({\r\n        type: \"set_session\",\r\n        payload: {\r\n            key: key,\r\n            db_id: db_id\r\n        }\r\n    }),\r\n    setPlayer: (name) => dispatch({\r\n        type: \"set_player\",\r\n        payload: name\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Join);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport firestore from \"../modules/firestore.js\";\r\nimport cookie from \"react-cookies\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst VALID_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ98765432\"\r\n\r\nclass Host extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            player_name: \"\",\r\n            error_message: \"\"\r\n        };\r\n    }\r\n\r\n    hostGame() {\r\n        if (this.state.player_name) {\r\n            let key = VALID_CHARS[Math.floor(Math.random()*VALID_CHARS.length)] + VALID_CHARS[Math.floor(Math.random()*VALID_CHARS.length)] + VALID_CHARS[Math.floor(Math.random()*VALID_CHARS.length)] + VALID_CHARS[Math.floor(Math.random()*VALID_CHARS.length)]\r\n            firestore.collection(\"sessions\").add({\r\n                players: [this.state.player_name],\r\n                key: key,\r\n                stage: \"lobby\",\r\n                round: {\r\n                    id: 0,\r\n                    topic: \"\",\r\n                    word: \"\",\r\n                    chameleon: 0\r\n                }\r\n            }).then(ref => {\r\n                this.props.setSession(key, ref.id)\r\n                this.props.setPlayer(this.state.player_name);\r\n                cookie.save(\"session\", {key: key, db_id: ref.id})\r\n                cookie.save(\"player\", this.state.player_name)\r\n            })\r\n        } else {\r\n            this.setState({error_message: \"Enter a Name!\"})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.error_message ?\r\n                    <Row><Col>\r\n                        <Alert variant=\"danger\">\r\n                            {this.state.error_message}\r\n                        </Alert>\r\n                    </Col></Row>\r\n                : null}\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Label> Player Name: </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control onChange={(e) => this.setState({player_name: e.target.value})}/>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Button onClick={() => this.hostGame()}>\r\n                        Host Game\r\n                    </Button>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    topics: state.topics\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setRoom: (topics) => dispatch({\r\n        type: \"set_topics\",\r\n        payload: topics\r\n    }),\r\n    setSession: (key, db_id) => dispatch({\r\n        type: \"set_session\",\r\n        payload: {\r\n            key: key,\r\n            db_id: db_id\r\n        }\r\n    }),\r\n    setPlayer: (name) => dispatch({\r\n        type: \"set_player\",\r\n        payload: name\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Host);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport cookie from \"react-cookies\";\r\n\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport Join from \"./Join.js\";\r\nimport Host from \"./Host.js\"\r\n\r\nclass Menu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mode: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let session = cookie.load(\"session\");\r\n        let name = cookie.load(\"player\");\r\n        if (session && session.key && session.db_id && name) {\r\n                this.props.setSession(session);\r\n                this.props.setPlayer(name);\r\n        }\r\n    }\r\n\r\n    genBody() {\r\n        switch(this.state.mode) {\r\n            case \"join\":\r\n                return (\r\n                    <Card.Body>\r\n                        <Join/>\r\n                    </Card.Body>\r\n                );\r\n            case \"host\":\r\n                return (\r\n                    <Card.Body>\r\n                        <Host/>\r\n                    </Card.Body>\r\n                );\r\n            default:\r\n                return (\r\n                    <Card.Body>\r\n                    <Row>\r\n                        <Col/>\r\n                        <Col>\r\n                            <Button variant=\"success\" onClick={() => this.setState({mode: \"join\"})}>\r\n                                Join\r\n                            </Button>\r\n                        </Col>\r\n                        <Col/>\r\n                        <Col>\r\n                            <Button variant=\"warning\" onClick={() => this.setState({mode: \"host\"})}>\r\n                                Host\r\n                            </Button>\r\n                        </Col>\r\n                        <Col/>\r\n                    </Row>\r\n                    </Card.Body>\r\n                );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Card.Header>\r\n                        The Chameleon Game\r\n                    </Card.Header>\r\n                    {this.genBody()}\r\n                    <Card.Footer>\r\n                        {this.state.mode !== \"\" ?\r\n                            <Button variant=\"dark\" onClick={() => this.setState({mode: \"\"})}>\r\n                                Back\r\n                            </Button>\r\n                        :\r\n                            null\r\n                        }\r\n                    </Card.Footer>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setSession: (session) => dispatch({\r\n        type: \"set_session\",\r\n        payload: session\r\n    }),\r\n    setPlayer: (name) => dispatch({\r\n        type: \"set_player\",\r\n        payload: name\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport firestore from \"../modules/firestore.js\";\r\nimport cookie from \"react-cookies\";\r\nimport firebase from \"firebase/app\";\r\n\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nfunction titleCase(string) {\r\n    if (!string) return \"\";\r\n    let sentence = string.toLowerCase().split(\" \");\r\n    for(let i = 0; i< sentence.length; i++){\r\n        sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);\r\n    }\r\n    return sentence.join(\" \");\r\n}\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Set up listener (May need to put this in a promise later)\r\n        firestore.collection(\"sessions\").doc(this.props.session.db_id)\r\n            .onSnapshot({includeMetadataChanges: true}, (doc) => {\r\n                if (doc.exists) {\r\n                    this.props.updateGame(doc.data());\r\n                } else {\r\n                    cookie.remove(\"player\");\r\n                    cookie.remove(\"session\");\r\n                    this.props.clearGame();\r\n                }\r\n            })\r\n    }\r\n\r\n    genBody() {\r\n        switch(this.props.stage) {\r\n            case \"lobby\":\r\n                return this.lobby();\r\n            case \"hints\":\r\n                return <Row>{this.hints()}</Row>;\r\n            case \"voting\":\r\n                if (this.props.voting.voters.length === this.props.players.length) {\r\n                    return this.results();\r\n                } else {\r\n                    return this.voting();\r\n                }\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    genFooter() {\r\n        switch(this.props.stage) {\r\n            case \"lobby\":\r\n                if (this.props.players[0] === this.props.player_name) {\r\n                    //HOST ONLY\r\n                    return (<Row>\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                //Start Game\r\n                                let topic = Object.keys(this.props.topics)[Math.floor(Math.random()*Object.keys(this.props.topics).length)];\r\n                                let word = this.props.topics[topic][Math.floor(Math.random()*this.props.topics[topic].length)];\r\n                                let new_chameleon = Math.floor(Math.random()*this.props.players.length);\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                    stage: \"hints\",\r\n                                    \"round.topic\": topic,\r\n                                    \"round.word\": word,\r\n                                    \"round.chameleon\": new_chameleon,\r\n                                    \"round.voting\": []\r\n                                })\r\n                            }}>Start Game</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                //End Game\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).delete()\r\n                            }}>End Game</Button>\r\n                        </Col>\r\n                    </Row>)\r\n                } else {\r\n                    return (<Button onClick={() => {\r\n                        firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                            players: firebase.firestore.FieldValue.arrayRemove(this.props.player_name),\r\n                        }).then(() => {\r\n                            cookie.remove(\"player\");\r\n                            cookie.remove(\"session\");\r\n                            this.props.clearGame();\r\n                        })\r\n                    }}>\r\n                        Leave Game\r\n                    </Button>)\r\n                }\r\n            case \"hints\":\r\n                if (this.props.players[0] === this.props.player_name) {\r\n                    //HOST ONLY\r\n                    return (<Row>\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                //Next Round\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                    stage: \"voting\"\r\n                                })\r\n                            }}>To Voting</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                    stage: \"lobby\",\r\n                                })\r\n                            }}>\r\n                                Return to Lobby\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>)\r\n                }\r\n                break;\r\n            case \"voting\":\r\n                if (this.props.players[0] === this.props.player_name) {\r\n                    //HOST ONLY\r\n                    return (<Row>\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                //Next Round\r\n                                let topic = Object.keys(this.props.topics)[Math.floor(Math.random()*Object.keys(this.props.topics).length)];\r\n                                let word = this.props.topics[topic][Math.floor(Math.random()*this.props.topics[topic].length)];\r\n                                let new_chameleon = Math.floor(Math.random()*this.props.players.length);\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                    stage: \"hints\",\r\n                                    \"round.id\": this.props.round+1,\r\n                                    \"round.topic\": topic,\r\n                                    \"round.word\": word,\r\n                                    \"round.chameleon\": new_chameleon,\r\n                                    \"round.voting\": []\r\n                                })\r\n                            }}>Next Round</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                    stage: \"lobby\",\r\n                                })\r\n                            }}>\r\n                                Return to Lobby\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>)\r\n                }\r\n                break;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    lobby() {\r\n        let lobby = [];\r\n        lobby.push(<Alert variant=\"info\" key=\"code\">{\"Room Code: \"+this.props.session.key}</Alert>)\r\n        for (let p in this.props.players) {\r\n            lobby.push(<ListGroup.Item key={p} active={this.props.player_name === this.props.players[p]}>\r\n                {this.props.players[p]}\r\n            </ListGroup.Item>)\r\n        }\r\n        return lobby;\r\n    }\r\n\r\n    hints() {\r\n        let hints = []\r\n        let counter = -1;\r\n        hints.push(<Col key={\"players\"}>\r\n                {this.props.players.map((p) => {\r\n                    counter += 1;\r\n                    return (<ListGroup.Item key={p}variant={this.props.round % this.props.players.length === counter ? \"secondary\" : \"\"}>\r\n                        {titleCase(p)}\r\n                    </ListGroup.Item>);\r\n                })}\r\n            </Col>);\r\n        hints.push(<br key={\"break\"}/>);\r\n        hints.push(<Col key=\"board+role\">\r\n            <Row>\r\n                <Table bordered striped>\r\n                    <tbody>\r\n                        {this.genBoard()}\r\n                    </tbody>\r\n                </Table>\r\n            </Row>\r\n                <Alert variant=\"info\">\r\n                    {this.props.role ?\r\n                        \"Secret Word: \" + titleCase(this.props.role)\r\n                    :\r\n                        \"You are the Chameleon!\"\r\n                    }\r\n                </Alert>\r\n            <Row>\r\n            </Row>\r\n        </Col>)\r\n        return hints;\r\n    }\r\n\r\n    genBoard() {\r\n        let rows = []\r\n        rows.push(<tr key={\"head\"}>\r\n            <th colSpan=\"4\">{titleCase(this.props.topic)}</th>\r\n        </tr>)\r\n        for (let r in [0,1,2,3]) {\r\n            let row = <tr key={\"r\"+r}>\r\n                {[0,1,2,3].map((c) => {\r\n                    return <td key={\"i\"+(r*4 + c)}>\r\n                        {titleCase(this.props.topics[this.props.topic][r*4 + c])}\r\n                    </td>\r\n                })}\r\n            </tr>\r\n            rows.push(row)\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    voting() {\r\n        let voting = [];\r\n        if (this.props.voting.voters.includes(this.props.player_name)) {\r\n            voting.push(<Alert variant={\"info\"} key=\"vote cast\">\r\n                {\"Your vote has been counted.\"}\r\n            </Alert>);\r\n        } else {\r\n            for (let p in this.props.players) {\r\n                voting.push(<ListGroup.Item key={p} id={p} onClick={() => {\r\n                    firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                        \"round.voting\": firebase.firestore.FieldValue.arrayUnion(this.props.player_name+\"|\"+this.props.players[p]),\r\n                    })\r\n                }}>\r\n                    {this.props.players[p]}\r\n                </ListGroup.Item>)\r\n            }\r\n        }\r\n        return voting;\r\n    }\r\n\r\n    results() {\r\n        let results = [];\r\n        let counts = {};\r\n        for (let v in this.props.voting.votes) {\r\n            if (this.props.voting.votes[v] in counts) {\r\n                counts[this.props.voting.votes[v]] += 1;\r\n            } else {\r\n                counts[this.props.voting.votes[v]] = 1;\r\n            }\r\n        }\r\n        for (let c in Object.keys(counts)) {\r\n            c = Object.keys(counts)[c];\r\n            results.push(<ListGroup.Item key={c} id={c}>\r\n                {c+\": \"+counts[c]}\r\n            </ListGroup.Item>)\r\n        }\r\n        results.push(<br/>);\r\n        results.push(<Table bordered striped>\r\n            <tbody>\r\n                {this.genBoard()}\r\n            </tbody>\r\n        </Table>);\r\n\r\n        return results;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Card.Header>\r\n                        {titleCase(this.props.stage)}\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        {this.genBody()}\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        {this.genFooter()}\r\n                    </Card.Footer>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    session: state.session,\r\n    player_name: state.player_name,\r\n    stage: state.stage,\r\n    players: state.players,\r\n    topics: state.topics,\r\n    topic: state.round.topic,\r\n    role: state.round.role,\r\n    round: state.round.id,\r\n    voting: state.voting,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateGame: (doc) => dispatch({\r\n        type: \"update_game\",\r\n        payload: doc\r\n    }),\r\n    clearGame: () => dispatch({\r\n        type: \"clear_game\",\r\n        payload: null\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\r\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\n\nimport LoadTopics from \"./components/LoadTopics.js\";\nimport Menu from \"./components/Menu.js\";\nimport Game from  \"./components/Game.js\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div>\n            <link\n              rel=\"stylesheet\"\n              href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\"\n              integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\"\n              crossOrigin=\"anonymous\"\n            />\n            {/*<button onClick={() => this.props.debug()}>DEBUG</button>*/}\n            {this.props.db_updated ?\n                <>\n                {this.props.session.key && this.props.session.db_id ?\n                    <Game/>\n                :\n                    <Menu/>\n                }\n                </>\n            :\n                <LoadTopics/>\n            }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    db_updated: state.db_updated,\n    session: state.session,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    debug: () => dispatch({\n        type: \"dump_store\",\n        payload: null\n    }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import _ from \"lodash\";\r\n\r\nconst initialState = {\r\n    player_name: \"\",\r\n    players: [],\r\n    db_updated: false,\r\n    topics: {},\r\n    session: {\r\n        key: \"\",\r\n        db_id: \"\"\r\n    },\r\n    stage: \"\",\r\n    round: {\r\n        id: 0,\r\n        topic: \"\",\r\n        role: \"\"\r\n    },\r\n    voting: {\r\n        voters: [],\r\n        votes: [],\r\n    }\r\n};\r\n\r\nconst chameleonReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n    case \"dump_store\": {\r\n        console.log(state);\r\n        return state;\r\n    }\r\n\r\n    case \"set_topics\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.topics = action.payload;\r\n        newState.db_updated = true;\r\n        return newState;\r\n    }\r\n\r\n    case \"set_session\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.session = action.payload;\r\n        return newState;\r\n    }\r\n\r\n    case \"set_player\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.player_name = action.payload;\r\n        return newState;\r\n    }\r\n\r\n    case \"update_game\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.stage = action.payload.stage;\r\n        newState.players = action.payload.players;\r\n        newState.round.id = action.payload.round.id;\r\n        newState.round.topic = action.payload.round.topic;\r\n        if (action.payload.players[action.payload.round.chameleon] === state.player_name) {\r\n            newState.round.role = \"\";\r\n        } else {\r\n            newState.round.role = action.payload.round.word;\r\n        }\r\n        newState.voting.voters = [];\r\n        newState.voting.votes = [];\r\n        for (let v in action.payload.round.voting) {\r\n            let vote = action.payload.round.voting[v].split(\"|\");\r\n            newState.voting.voters.push(vote[0])\r\n            newState.voting.votes.push(vote[1]);\r\n        }\r\n        return newState;\r\n    }\r\n\r\n    case \"clear_game\": {\r\n        let newState = _.cloneDeep(initialState);\r\n        return newState;\r\n    }\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default chameleonReducer;\r\n","import {createStore} from \"redux\";\r\n\r\nimport reducer from \"./reducer\";\r\n\r\nexport default function configureStore(initialState) {\r\n    const store = createStore(reducer, initialState);\r\n    return store;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport configureStore from \"./modules/store\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst reduxStore = configureStore(window.REDUX_INITIAL_DATA);\n\nReactDOM.render(<ReduxProvider store={reduxStore}><App /></ReduxProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}